# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-pseudo-parameters

service: fct

provider:
  name: aws
  runtime: nodejs10.x
  stage: default
  region: ap-southeast-2
  environment:
    BTC_MARKETS_KEY: ${self:custom.env.BTC_MARKETS_KEY, 'btcmarkets_key'}
    BTC_MARKETS_SECRET: ${self:custom.env.BTC_MARKETS_SECRET, 'btcmarkets_secret'}
    COIN: ${self:custom.env.COIN, 'BTC'}
    AUD_PURCHASE_AMOUNT: ${self:custom.env.AUD_PURCHASE_AMOUNT, '20'}
    MIN_PERCENTAGE_GAIN: ${self:custom.env.MIN_PERCENTAGE_GAIN, '8'}
    MAX_AUD_IN_OPEN_TRADES: ${self:custom.env.MAX_AUD_IN_OPEN_TRADES, '100'}
    LIVE: ${self:custom.env.LIVE, 'false'}
    DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME, 'FCT_DEFAULT_TABLE_NAME'}
    MIN_AUD_IN_OPEN_TRADES: ${self:custom.env.MIN_AUD_IN_OPEN_TRADES, '60'}
    MAX_MINUTES_BETWEEN_TRADES: ${self:custom.env.MAX_MINUTES_BETWEEN_TRADES, '360'}
    JSON_DATA: ${self:custom.env.JSON_DATA}
    MODE: ${self:custom.env.MODE, 'ACCUMULATE'}
    EXCHANGE: ${self:custom.env.EXCHANGE, 'btcmarkets'}
    STRATEGY: ${self:custom.env.STRATEGY, 'chunk'}
    ENABLE_BUY: ${self:custom.env.ENABLE_BUY, 'true'}
    ENABLE_SELL: ${self:custom.env.ENABLE_SELL, 'true'}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:DescribeTable"
      Resource:
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.env.DB_TABLE_NAME, 'FCT_DEFAULT_TABLE_NAME'}"

custom:
  stage: ${opt:stage, self:provider.stage}
  env: ${file(env.yml):${self:custom.stage}}

package:
  exclude:
    - env.yml
    - exampleEnvs.yml

functions:
  buy:
    handler: handler.buy
    memorySize: 256
    timeout: 15
    events:
      - schedule:
          rate: cron(${self:custom.env.BUY_CRON_SCHEDULE})
          enabled: ${self:custom.env.ENABLE_BUY, 'true'}
  sell:
    handler: handler.sell
    memorySize: 256
    timeout: 15
    events:
      - schedule:
          rate: cron(${self:custom.env.SELL_CRON_SCHEDULE})
          enabled: ${self:custom.env.ENABLE_SELL, 'true'}

# you can add CloudFormation resource templates here
resources:
  Conditions:
    TableRequired:
      Fn::Equals:
        - ${self:custom.env.TABLE_REQUIRED, 'true'}
        - true

  Resources:
    TradesTable:
      Condition: TableRequired
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.env.DB_TABLE_NAME, 'FCT_DEFAULT_TABLE_NAME'}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.env.TABLE_THROUGHPUT, '5'}
          WriteCapacityUnits: ${self:custom.env.TABLE_THROUGHPUT, '5'}
